# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utilities to construct configs for TensorRT-LLM inference DAG."""

import datetime
from dags.common import test_owner
from xlml.apis import gcp_config, metric_config, task, test_config
from dags.common import vm_resource
from dags.common.vm_resource import Project, RuntimeVersion

RUNTIME_IMAGE = RuntimeVersion.TPU_UBUNTU2204_BASE.value
GCS_SUBFOLDER_PREFIX = test_owner.Team.INFERENCE.value


def get_maxtext_gpu_inference_config(
    machine_type: vm_resource.MachineVersion,
    image_project: vm_resource.ImageProject,
    image_family: vm_resource.ImageFamily,
    accelerator_type: vm_resource.GpuVersion,
    count: int,
    gpu_zone: vm_resource.Zone,
    time_out_in_min: int,
    test_name: str,
    project: Project,
    network: str,
    subnetwork: str,
    existing_instance_name: str = None,
) -> task.GpuCreateResourceTask:
  set_up_cmds = (
      "pip install --upgrade pip",
      # Pull maxtext container from Nvidia
      "docker pull ghcr.io/nvidia/jax:maxtext",
      "docker run -d --rm -it --net=host --shm-size=256g --gpus all -v /scratch:/scratch --name maxtext ghcr.io/nvidia/jax:maxtext sleep infinity",
  )

  jsonl_output_path = "metric_report.jsonl"
  docker_container_name = "maxtext"
  local_output_dir = "/opt/maxtext/"
  docker_cmds = (
      "pip install jsonlines",
      "git checkout -- .",
      "git checkout main",
      "git pull",
      # patch cl/733390414
      "rm /usr/local/lib/python3.12/dist-packages/aqt/jax/v2/flax/aqt_flax.py",
      "printf '' | base64 -d > /usr/local/lib/python3.12/dist-packages/aqt/jax/v2/flax/aqt_flax.py",
      'XLA_FLAGS="--xla_gpu_enable_latency_hiding_scheduler=true --xla_gpu_enable_command_buffer=FUSION --xla_disable_hlo_passes=rematerialization"',
      "export TF_FORCE_GPU_ALLOW_GROWTH=true",
      f"export BASE_OUTPUT_DIRECTORY={local_output_dir}",
      "export ASYNC_CHECKPOINTING=false",
      "export XLA_PYTHON_CLIENT_MEM_FRACTION=0.94",
      "export PER_DEVICE_BATCH_SIZE=190",
      "export PYTHONPATH='/opt/maxtext:${PYTHONPATH:+:$PYTHONPATH}'",
      f"python3 MaxText/inference_microbenchmark.py MaxText/configs/base.yml  base_output_directory=$BASE_OUTPUT_DIRECTORY model_name='llama2-70b' max_prefill_predict_length=1024 max_target_length=2048 attention=dot_product scan_layers=false hardware=gpu async_checkpointing=$ASYNC_CHECKPOINTING per_device_batch_size=$PER_DEVICE_BATCH_SIZE inference_microbenchmark_prefill_lengths=1024 inference_microbenchmark_stages=prefill,generate inference_microbenchmark_loop_iters=64 run_name=$(date +%Y-%m-%d-%H-%M) ici_fsdp_parallelism=1 ici_autoregressive_parallelism=1 ici_tensor_parallelism=-1 weight_dtype=bfloat16 kv_quant_dtype=fp8 quantize_kvcache=True quantization=aqt_fp8 > output.txt",
      "wget https://raw.githubusercontent.com/GoogleCloudPlatform/ml-auto-solutions/refs/heads/master/dags/inference/utils/maxtext_gpu_microbenchmark_jsonl_converter.py",
      f"python maxtext_gpu_microbenchmark_jsonl_converter.py {jsonl_output_path}",
  )
  docker_cmd = " && ".join(docker_cmds)
  run_model_cmds = (
      "pip install jsonlines",
      "gsutil cp gs://yijiaj/temp/maxtext_gpu_microbenchmark_jsonl_converter.py .",
      f"docker restart {docker_container_name}",
      f"docker cp maxtext_gpu_microbenchmark_jsonl_converter.py {docker_container_name}:/opt/maxtext/maxtext_gpu_microbenchmark_jsonl_converter.py",
      f"docker exec -i {docker_container_name} /bin/bash -c '{docker_cmd}'",
      f"docker cp {docker_container_name}:{local_output_dir}/{jsonl_output_path} {jsonl_output_path}",
      f"cat {jsonl_output_path}",
      f"gsutil cp {jsonl_output_path} {metric_config.SshEnvVars.GCS_OUTPUT.value}",
  )

  job_test_config = test_config.GpuVmTest(
      test_config.Gpu(
          machine_type=machine_type.value,
          image_family=image_family.value,
          count=count,
          accelerator_type=accelerator_type.value,
          runtime_version=RUNTIME_IMAGE,
          network=network,
          subnetwork=subnetwork,
          disk_size_gb=100,
      ),
      test_name=test_name,
      set_up_cmds=set_up_cmds,
      run_model_cmds=run_model_cmds,
      timeout=datetime.timedelta(minutes=time_out_in_min),
      task_owner=test_owner.YIJIA_J,
      gcs_subfolder=f"{GCS_SUBFOLDER_PREFIX}/maxtext_gpu",
      use_existing_instance=existing_instance_name is not None,
  )

  job_gcp_config = gcp_config.GCPConfig(
      project_name=project.value,
      zone=gpu_zone.value,
      dataset_name=metric_config.DatasetOption.BENCHMARK_DATASET,
  )

  job_metric_config = metric_config.MetricConfig(
      json_lines=metric_config.JSONLinesConfig(jsonl_output_path),
      use_runtime_generated_gcs_folder=True,
  )

  return task.GpuCreateResourceTask(
      image_project.value,
      image_family.value,
      job_test_config,
      job_gcp_config,
      job_metric_config,
      existing_instance_name=existing_instance_name,
  )
